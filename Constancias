#include <iostream>
#define TAM 50

class constancia{
private:
    std::string nombre, carrera;
    int aprob;
    float prom;
public:
    constancia(){};
    friend std::ostream & operator<<(std::ostream &O, constancia &x){
            O<<"\nNombre: "<<x.nombre<<std::endl;
            O<<"\nCarrera: "<<x.carrera<<std::endl;
            O<<"\nMaterias aprobadas: "<<x.aprob<<std::endl;
            O<<"\nPromedio: "<<x.prom<<std::endl;
            return O;
    }
    friend std::istream & operator>>(std::istream &O, constancia &x){
            std::cout<<"\nNombre: ";
            O>>x.nombre;
            std::cout<<"\nCarrera: ";
            O>>x.carrera;
            std::cout<<"\nMaterias aprobadas: ";
            O>>x.aprob;
            std::cout<<"\nPromedio: ";
            O>>x.prom;
            return O;
    }
};

template<class T>
class Cola{
private:
    T datos[TAM];
    int ult;
    bool inserta(T , int);
    bool elimina(int);
    int primero()const;
    int ultimo()const;
public:
    Cola():ult(-1){}
    bool vacia()const;
    bool llena()const;
    bool  Queue(T&);
    bool Dequeue();
    T Front()const;
};

template<class T>
T Cola<T>::Front()const{
    T x=datos[primero()];
    return x;
}

template<class T>
bool Cola<T>::Dequeue(){
    if(vacia()){
        return false;
    }
    else{
        elimina(primero());
    }
    return true;
}

template<class T>
bool Cola<T>::Queue(T& elem){
    if(llena()){
        return false;
    }
    if(vacia()){
        inserta(elem,0);
    }
    else{
        inserta(elem, ultimo()+1);
    }
    return true;
}


template<class T>
bool Cola<T>::vacia()const{
    return ult==-1;
}

template<class T>
bool Cola<T>::llena()const{
    return ult==TAM-1;
}

template<class T>
bool Cola<T>::inserta(T elem, int pos){
    if(llena() || pos<0 || pos>ult+1){
        std::cout<<"\n No se pudo insertar";
        return false;
    }
    int i=ult+1;
    while(i>pos){
        datos[i]=datos[i-1];
        i--;
    }
    datos[pos]=elem;
    ult++;
    return true;
}

template<class T>
bool Cola<T>::elimina(int pos){
    if(vacia() || pos<0 || pos>ult){
        std::cout<<"\n No se pudo eliminar";
        return false;
    }
    int i=pos;
    while(i<ult){
        datos[i]=datos[i+1];
        i++;
    }
    ult--;
    return true;
}

template<class T>
int Cola<T>::primero()const{
    if(vacia()){
       return -1;
    }
    return 0;
}

template<class T>
int Cola<T>::ultimo()const{
    if(vacia()){
       return -1;
    }
    return ult;
}

int main()
{
    Cola<constancia> MiCola;
    constancia x;
    int aux,cont=0;

    do {
        std::cout<<"\n1.Solicitud a constancia\n2.Elaborar constancia\n3.Salir\nSelecciona una opcion: "<<std::endl;
        std::cin>>aux;
        switch(aux){
        case 1:
                std::cin>>x;
                MiCola.Queue(x);
                cont++;
            break;
        case 2:
            if(cont==0)
            {
                std::cout<<"\nNo hay constancias pendientes"<<std::endl;
            }
            else
            {
                x=MiCola.Front();
                std::cout<<x<<std::endl;
                MiCola.Dequeue();
                cont--;
            }
            break;
        case 3:
            break;
        default:
            std::cout<<"\nOpcion no valida"<<std::endl;
        }
        system("pause");system("CLS");
    }while(aux!=3);

    return 0;
}
